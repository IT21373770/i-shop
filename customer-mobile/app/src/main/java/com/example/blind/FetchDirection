package com.example.blind

import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONArray
import java.io.BufferedReader
import java.io.InputStreamReader
import java.net.HttpURLConnection
import java.net.URL

data class LocationData(
    val aisleList: List<Location>,
    val sectionList: List<Location.Section>

)

class FetchDirection(private val listener: OnDataFetchedListener) {

    interface OnDataFetchedListener {
        fun onDataFetched(aisleList: List<Location>, sectionList: List<Location.Section>)
    }

    constructor() : this(object : OnDataFetchedListener {
        override fun onDataFetched(aisleList: List<Location>, sectionList: List<Location.Section>) {
            // Default implementation
        }
    })

    private val mongoDBApiUrl =
        "https://ap-south-1.aws.data.mongodb-api.com/app/application-0-wuycs/endpoint/getDirection?command"

    suspend fun fetchDirection(spokenText: String) {
        withContext(Dispatchers.IO) {
            try {
                val url = URL("$mongoDBApiUrl=$spokenText")
                Log.d("SpeechRecognition", "Url: $url")
                val urlConnection: HttpURLConnection = url.openConnection() as HttpURLConnection
                val inputStreamReader = InputStreamReader(urlConnection.inputStream)
                val bufferedReader = BufferedReader(inputStreamReader)

                val stringBuilder = StringBuilder()
                var line: String?
                while (bufferedReader.readLine().also { line = it } != null) {
                    stringBuilder.append(line)
                }

                val jsonArray = JSONArray(stringBuilder.toString())
                val aisleList = mutableListOf<Location>()
                val sectionList = mutableListOf<Location.Section>()

                for (i in 0 until jsonArray.length()) {
                    val jsonObject = jsonArray.getJSONObject(i)
                    val id = jsonObject.getString("_id")
                    val name = jsonObject.getString("name")
                    val path = jsonObject.getString("path")
                    val aisle = Location(id, name, path, emptyList())
                    aisleList.add(aisle)

                    val sectionArray = jsonObject.getJSONArray("section")
                    for (j in 0 until sectionArray.length()) {
                        val sectionObject = sectionArray.getJSONObject(j)
                        val sectionName = sectionObject.getString("name")
                        val sectionPath = sectionObject.getString("path")
                        val sectionId = sectionObject.getString("_id")
                        val section = Location.Section(sectionName, sectionPath, sectionId)
                        sectionList.add(section)
                    }
                }

                val locationData = LocationData(aisleList, sectionList)
                Log.d("SpeechRecognition", "Data: $locationData")
                listener.onDataFetched(locationData.aisleList, locationData.sectionList)


            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }
}